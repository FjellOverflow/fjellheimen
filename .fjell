fjell() {
  COMMAND="$1"
  shift
  case "$COMMAND" in
    "ps")
        fjell_ps "$@"
        ;;
    "start")
        fjell_start "$@"
        ;;
    "stop")
        fjell_stop "$@"
        ;;
    "rm")
        fjell_rm "$@"
        ;;
    "restart")
        fjell_restart "$@"
        ;;
    "up")
        fjell_up "$@"
        ;;
    "down")
        fjell_down "$@"
        ;;
    "ip")
        fjell_ip "$@"
        ;;
    "logs")
        fjell_logs "$@"
        ;;
    "shell")
        fjell_shell "$@"
        ;;
    *)
        echo "Invalid command"
        ;;
  esac
}

fjell_ps() {
  docker ps -a --format "table {{.ID}}\t{{.Image}}\t{{.Size}}\t{{.Status}}\t{{.Names}}" "$@"
}

fjell_start() {
  docker start "$@"
}

fjell_stop() {
  docker stop "$@"
}

fjell_rm() {
  docker stop "$@"
  docker rm "$@"
}

fjell_restart() {
  docker restart "$@"
}

fjell_up() {
  for file in "$@"; do
    if [ -f "/homeserver/$file/docker-compose.yaml" ]; then
      docker compose -f "/homeserver/$file/docker-compose.yaml" up -d
    else
      echo "Stack '$file' does not exist."
    fi
  done
}

fjell_down() {
  for file in "$@"; do
    if [ -f "/homeserver/$file/docker-compose.yaml" ]; then
      docker compose -f "/homeserver/$file/docker-compose.yaml" down
    else
      echo "Stack '$file' does not exist."
    fi
  done
}

fjell_ip() {
  publicip=$(wget -O - -q https://checkip.amazonaws.com)
  localip=$(hostname -I | cut -f1 -d' ')

  echo "Local: $localip"
  echo "Public: $publicip"
}

fjell_logs() {
  docker logs -f "$@"
}

fjell_shell() {
  docker exec -it "$@" sh
}
